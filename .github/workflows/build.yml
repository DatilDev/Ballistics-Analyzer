name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Web/PWA Build
  build-web:
    name: Build PWA
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-web-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-web-
        
    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
    - name: Build WASM
      run: |
        # Build with web features
        wasm-pack build --target web --out-dir pkg --release \
          --no-default-features --features web
        
    - name: Prepare dist directory
      run: |
        mkdir -p dist/assets dist/pkg
        
        # Copy HTML and manifest files
        [ -f index.html ] && cp index.html dist/
        [ -f manifest.json ] && cp manifest.json dist/
        [ -f sw.js ] && cp sw.js dist/
        
        # Copy assets if they exist
        if [ -d assets ]; then
          cp -r assets/* dist/assets/ 2>/dev/null || true
        fi
        
        # Copy WASM build output
        if [ -d pkg ]; then
          cp -r pkg/* dist/pkg/
        fi
        
    - name: Upload PWA artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pwa-build
        path: dist/
        retention-days: 7
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist

  # Desktop Builds
  build-desktop:
    name: Build ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            target: x86_64-unknown-linux-gnu
            artifact: ballistics-analyzer
            artifact_name: ballistics-analyzer-linux
            
          - os: windows-latest
            name: Windows
            target: x86_64-pc-windows-msvc
            artifact: ballistics-analyzer.exe
            artifact_name: ballistics-analyzer-windows
            
          - os: macos-latest
            name: macOS
            target: x86_64-apple-darwin
            artifact: ballistics-analyzer
            artifact_name: ballistics-analyzer-macos
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libssl-dev \
          pkg-config \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxkbcommon-dev \
          libglu1-mesa-dev \
          libudev-dev \
          libsqlite3-dev
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-desktop-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-desktop-
        
    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }} --features desktop
      env:
        # Use vendored/bundled versions to avoid linking issues
        RUSQLITE_BUNDLED: 1
        LIBSQLITE3_SYS_BUNDLING: 1
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact }}
        retention-days: 7

  # Arch Linux AUR Package Build
  build-arch:
    name: Build Arch Linux Package
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    
    steps:
    - name: Setup build environment
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel rust cargo git gtk3 pkgconf sqlite
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build package
      run: |
        # Create non-root user for makepkg
        useradd -m builder
        chown -R builder:builder .
        
        # Build with bundled SQLite
        su builder -c "RUSQLITE_BUNDLED=1 cargo build --release --features desktop"
        
    - name: Package binary
      run: |
        mkdir -p package/usr/bin
        cp target/release/ballistics-analyzer package/usr/bin/
        tar czf ballistics-analyzer-arch.tar.gz -C package .
        
    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: ballistics-analyzer-arch
        path: ballistics-analyzer-arch.tar.gz
        retention-days: 7

  # Android Build (Fixed)
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android armv7-linux-androideabi
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        
    - name: Install Android NDK
      run: |
        sdkmanager "ndk;25.2.9519653" "build-tools;34.0.0" "platforms;android-34"
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        
    - name: Install cargo-ndk
      run: |
        cargo install cargo-ndk --version 3.4.0
        
    - name: Build Android libraries
      run: |
        export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
        cargo ndk -t arm64-v8a -t armeabi-v7a build --release \
          --no-default-features --features android
      env:
        ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        RUSQLITE_BUNDLED: 1
        
    - name: Package Android libraries
      run: |
        mkdir -p android-build/lib/arm64-v8a
        mkdir -p android-build/lib/armeabi-v7a
        
        # Copy built libraries if they exist
        [ -f target/aarch64-linux-android/release/libballistics_analyzer.so ] && \
          cp target/aarch64-linux-android/release/libballistics_analyzer.so android-build/lib/arm64-v8a/ || \
          echo "arm64 library not found"
          
        [ -f target/armv7-linux-androideabi/release/libballistics_analyzer.so ] && \
          cp target/armv7-linux-androideabi/release/libballistics_analyzer.so android-build/lib/armeabi-v7a/ || \
          echo "armv7 library not found"
        
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-libs
        path: android-build/
        retention-days: 7
        if-no-files-found: warn